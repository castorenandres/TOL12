# # import
import turtle
from typing import Type
from MemoryVM import GlobalMemory
from MemoryVM import LocalMemory
class VirtualMachine:
    memoryG = GlobalMemory()
    constantTable = {}
    funcTable = {}
    instruction = 1
    # quadruples parts
    op = 0
    right = 0
    left = 0
    res = 0
    trt = turtle.Turtle()

    # Return the program's name, which holds global variables and constants.
    def getProgramsName(self):
        for key, value in self.funcTable.items():
            if "varT" in value:
                return key


    # Iterate through funcTable dictionary by variable to add each variable to memory.
    def setGlobalVariables(self):
        programName = self.getProgramsName()
        varTable = self.funcTable[programName]["varT"]
        for variable in varTable:
            self.memoryG.setGlobalVariables(varTable[variable]["dir"])

    # Iterate through constantTable dictionary by constant to add each constant to memory.
    def setConstantVariables(self):
        for constant in self.constantTable:
            dirC = self.constantTable[constant]
            self.memoryG.setConstants(dirC, constant)
        

# para operaciones checar con la direccion si es un getValue o updateMemory gloabl o local
# primero checar que se pongan variables globales y constantes en la memoria global
# hago los ifs, elifs para checar op
    def breakQuadrupleParts(self, quadruple, instruction):
        op = quadruple[instruction]["op"]
        left = quadruple[instruction]["left"]
        right = quadruple[instruction]["right"]
        res = quadruple[instruction]["res"]

        return op, left, right, res

    # Main function of the virtual machine, runs the intermidiate code generated by the parser.
    def startProgram(self, quadruples, funcTable, constantTable):
        print("---------------------------------------------------------------")
        self.funcTable = funcTable
        self.constantTable = constantTable
        self.setGlobalVariables()
        self.setConstantVariables()
        # print(funcTable, '\n')
        # print(constantTable, '\n')
        # print(quadruples, '\n')
        # self.memoryG.show()

        while self.instruction < len(quadruples):
            self.op, self.left, self.right, self.res = self.breakQuadrupleParts(quadruples, self.instruction)

            # arithmetic expressions
            if self.op == 1:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                if self.right >= 5000 and self.right < 9000:
                    print("local variable")
                else:
                    rightSide = self.memoryG.getValue(self.right)

                result = leftSide + rightSide
                self.memoryG.setTempVariables(self.res, result)
                # self.memoryG.show()
            elif self.op == 2:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                if self.right >= 5000 and self.right < 9000:
                    print("local variable")
                else:
                    rightSide = self.memoryG.getValue(self.right)

                result = leftSide - rightSide
                self.memoryG.setTempVariables(self.res, result)
                # self.memoryG.show()
            elif self.op == 3:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                if self.right >= 5000 and self.right < 9000:
                    print("local variable")
                else:
                    rightSide = self.memoryG.getValue(self.right)

                result = leftSide * rightSide
                self.memoryG.setTempVariables(self.res, result)
                # self.memoryG.show()
            elif self.op == 4:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                if self.right >= 5000 and self.right < 9000:
                    print("local variable")
                else:
                    rightSide = self.memoryG.getValue(self.right)

                result = leftSide / rightSide
                self.memoryG.setTempVariables(self.res, result)
                # self.memoryG.show()
            elif self.op == 5:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                if self.right >= 5000 and self.right < 9000:
                    print("local variable")
                else:
                    rightSide = self.memoryG.getValue(self.right)

                if leftSide == rightSide:
                    result = 1
                else:
                    result = 0
                self.memoryG.setTempVariables(self.res, result)
                # self.memoryG.show()
            elif self.op == 6:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                if self.right >= 5000 and self.right < 9000:
                    print("local variable")
                else:
                    rightSide = self.memoryG.getValue(self.right)

                if leftSide != rightSide:
                    result = 1
                else:
                    result = 0
                self.memoryG.setTempVariables(self.res, result)
                # self.memoryG.show()
            elif self.op == 7:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                if self.right >= 5000 and self.right < 9000:
                    print("local variable")
                else:
                    rightSide = self.memoryG.getValue(self.right)

                if leftSide > rightSide:
                    result = 1
                else:
                    result = 0
                self.memoryG.setTempVariables(self.res, result)
                # self.memoryG.show()
            elif self.op == 8:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                if self.right >= 5000 and self.right < 9000:
                    print("local variable")
                else:
                    rightSide = self.memoryG.getValue(self.right)

                if leftSide < rightSide:
                    result = 1
                else:
                    result = 0
                self.memoryG.setTempVariables(self.res, result)
                # self.memoryG.show()
            elif self.op == 9:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                if self.right >= 5000 and self.right < 9000:
                    print("local variable")
                else:
                    rightSide = self.memoryG.getValue(self.right)

                if leftSide and rightSide:
                    result = 1
                else:
                    result = 0
                self.memoryG.setTempVariables(self.res, result)
                # self.memoryG.show()
            elif self.op == 10:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                if self.right >= 5000 and self.right < 9000:
                    print("local variable")
                else:
                    rightSide = self.memoryG.getValue(self.right)

                if leftSide or rightSide:
                    result = 1
                else:
                    result = 0
                self.memoryG.setTempVariables(self.res, result)
                # self.memoryG.show()
            elif self.op == 11:
                if self.left >= 5000 and self.left < 9000:
                    # local variable
                    print("local variable")
                else:
                    leftSide = self.memoryG.getValue(self.left)

                self.memoryG.updateMemory(self.res, leftSide)
                # self.memoryG.show()
            
            # Pre-define functions
            # read and write
            elif self.op == 101:
                result = input()

                if "." in result:
                    result = float(result)
                else:
                    result = int(result)

                if self.res >= 5000 and self.res < 9000:
                    # local variable
                    # t_res = getType
                    print("local variable")
                else:
                    t_res = self.memoryG.getType(self.res)
                    if t_res == "int" and type(result) == int:
                        self.memoryG.updateMemory(self.res, result)
                    elif t_res == "float" and type(result) == float:
                        self.memoryG.updateMemory(self.res, result)
                    else:
                        raise TypeError("Input and variable type do not match")

                # self.memoryG.show()
            elif self.op == 102:
                if self.res >= 11000 and self.res < 12000:
                    result = self.memoryG.getValue(self.res)
                    result = result.replace('"', '')
                    result = result.replace("\\n", "\n")
                    print(result, end="")
                else:
                    result = self.memoryG.getValue(self.res)
                    print(result)
            
            # Turtle graphics functions
            elif self.op == 103:
                x = self.memoryG.getValue(self.left)
                y = self.memoryG.getValue(self.right)
                self.trt.setpos(x, y)
            elif self.op == 104:
                radius = self.memoryG.getValue(self.left)
                self.trt.circle(radius)
            elif self.op == 105:
                distance = self.memoryG.getValue(self.left)
                if self.right == "vertical":
                    self.trt.sety(distance)
                else:
                    self.trt.setx(distance)
            elif self.op == 106:
                radius = self.memoryG.getValue(self.left)
                angle = self.memoryG.getValue(self.right)
                self.trt.circle(radius, angle)
            elif self.op == 107:
                self.trt.penup()
            elif self.op == 108:
                self.trt.pendown()
            elif self.op == 109:
                red = self.memoryG.getValue(self.left)
                green = self.memoryG.getValue(self.right)
                blue = self.memoryG.getValue(self.res)
                self.trt.screen.colormode(255)
                self.trt.pencolor(red, green, blue)
            elif self.op == 110:
                width = self.memoryG.getValue(self.left)
                self.trt.width(width)
            elif self.op == 111:
                self.trt.clear()

            # condicionales y ciclos
            elif self.op == 30:
                self.instruction = self.res - 1
            elif self.op == 31:
                if self.memoryG.getValue(self.left) == 0:
                    self.instruction = self.res - 1
            elif self.op == 32:
                if self.memoryG.getValue(self.left) == 1:
                    self.instruction = self.res - 1



            # print(self.instruction)
            self.instruction = self.instruction + 1
        turtle.done()
        self.memoryG.show()
        # print(quadruples)
